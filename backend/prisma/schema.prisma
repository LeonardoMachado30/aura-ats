datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TipoUsuario {
  ADMIN_SISTEMA
  ADMINISTRATIVO
  MODERADOR // Gerente
  RECRUTADOR
  VENDEDOR
  CLIENTE_ATS
  CLIENTE_ATS_CRM
}

enum TipoPessoa {
  FISICA
  JURIDICA
}

enum AreaCandidato {
  MEDICINA
  ENFERMAGEM
  OUTRO
}

enum EstadoCivil {
  SOLTEIRO
  CASADO
  DIVORCIADO
  VIUVO
  SEPARADO
  UNIAO_ESTAVEL
}

enum TipoSocio {
  REPRESENTANTE
  SOCIO
  ADMINISTRADOR
}

enum TipoServico {
  RECRUTAMENTO_CONTRATUAL
  RECRUTAMENTO_DISPARO_CURRICULO
  RECRUTAMENTO_INFORMACAO
  PLATAFORMA
}

enum StatusCliente {
  PROSPECT
  LEAD
  ATIVO
  INATIVO
  PENDENTE
}

model Pessoa {
  id             String           @id @default(uuid())
  nome           String
  cpf            String?          @unique
  dataNascimento DateTime?
  rg             String?
  estadoCivil    EstadoCivil?
  contatos       Contato[]
  localizacoes   Localizacao[]
  usuarioSistema UsuarioSistema[]
  socios         Socio[]
  candidato      Candidato[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  empresaRepresentada   Empresa? @relation("EmpresaRepresentantes", fields: [empresaRepresentadaId], references: [id])
  empresaRepresentadaId String?
}

model Empresa {
  id             String           @id @default(uuid())
  razaoSocial    String
  cnpj           String           @unique
  dataAbertura   DateTime?
  contatos       Contato[]
  localizacoes   Localizacao[]
  usuarioSistema UsuarioSistema[]
  socios         Socio[]
  representantes Pessoa[]         @relation("EmpresaRepresentantes")
  cliente        Cliente?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model UsuarioSistema {
  id          String      @id @default(uuid())
  email       String      @unique
  password    String
  tipoUsuario TipoUsuario
  setor       String?
  cargo       String?
  pessoaId    String?     @unique
  pessoa      Pessoa?     @relation(fields: [pessoaId], references: [id])

  empresaId String?  @unique
  empresa   Empresa? @relation(fields: [empresaId], references: [id])

  funcionario Funcionario?
}

model Cliente {
  id          String        @id @default(uuid())
  empresaId   String        @unique
  empresa     Empresa       @relation(fields: [empresaId], references: [id])
  tipoServico TipoServico[]
  status      StatusCliente
  vagas       Vaga[]
}

enum StatusCandidatura {
  APLICADO // Candidato se candidatou
  EM_ANALISE // Aplicação em revisão
  ENTREVISTA_AGENDADA // Entrevista marcada
  ENTREVISTA_CONCLUIDA // Entrevista realizada
  OFERTA_ENVIADA // Oferta de emprego enviada
  OFERTA_ACEITA // Candidato aceitou a oferta
  OFERTA_RECUSADA // Candidato recusou a oferta
  DESCLASSIFICADO // Candidato não avançou no processo
  CONTRATADO // Candidato foi contratado (pode ser um status final)
}

model CandidaturaVaga {
  id            String            @id @default(uuid())
  candidatoId   String
  vagaId        String
  status        StatusCandidatura @default(APLICADO)
  dataAplicacao DateTime          @default(now())
  observacoes   String?

  candidato Candidato @relation(fields: [candidatoId], references: [id])
  vaga      Vaga      @relation(fields: [vagaId], references: [id])

  @@unique([candidatoId, vagaId]) // <--- ESTA LINHA É A CHAVE
}

model Vaga {
  id            String        @id @default(uuid())
  titulo        String
  descricao     String
  create_at     DateTime      @default(now())
  update_at     DateTime      @default(now()) @updatedAt
  areaCandidato AreaCandidato

  clienteId String
  cliente   Cliente @relation(fields: [clienteId], references: [id])

  candidatos Candidato[]

  agenda          Agenda            @relation(fields: [agendaId], references: [id])
  agendaId        String
  CandidaturaVaga CandidaturaVaga[]
}

model Candidato {
  id              String            @id @default(uuid())
  areaCandidato   AreaCandidato
  pessoaId        String            @unique
  pessoa          Pessoa            @relation(fields: [pessoaId], references: [id])
  crm             String?
  corem           String?
  rqe             String?
  especialidade   Especialidade?    @relation(fields: [especialidadeId], references: [id])
  especialidadeId Int?
  agendaId        String?
  vagas           Vaga[]
  formacoes       Formacao[]
  CandidaturaVaga CandidaturaVaga[]
}

model Socio {
  id        String    @id @default(uuid())
  pessoaId  String
  empresaId String
  tipoSocio TipoSocio

  pessoa  Pessoa  @relation(fields: [pessoaId], references: [id])
  empresa Empresa @relation(fields: [empresaId], references: [id])

  @@unique([pessoaId, empresaId])
}

model Contato {
  id       String  @id @default(uuid())
  telefone String?
  whatsapp String?
  email    String?

  pessoaId String?
  pessoa   Pessoa? @relation(fields: [pessoaId], references: [id])

  empresaId String?
  empresa   Empresa? @relation(fields: [empresaId], references: [id])
}

model Localizacao {
  id          String  @id @default(uuid())
  cep         String
  cidade      String
  bairro      String
  uf          String
  estado      String?
  complemento String?
  logradouro  String?
  regiao      String?

  pessoaId String?
  pessoa   Pessoa? @relation(fields: [pessoaId], references: [id])

  empresaId String?
  empresa   Empresa? @relation(fields: [empresaId], references: [id])
}

model Formacao {
  id                   String    @id @default(uuid())
  instituicao          String?   @default("A definir")
  curso                String?   @default("A definir")
  dataInicio           DateTime?
  dataFim              DateTime?
  dataInicioResidencia DateTime?
  dataFimResidencia    DateTime?

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model Agenda {
  id   String @id @default(uuid())
  Vaga Vaga[]
}

model Especialidade {
  id        Int         @id @default(autoincrement())
  nome      String      @unique
  sigla     String
  candidato Candidato[]
}

model Funcionario {
  id               String         @id @default(uuid())
  setor            String?
  cargo            String?
  usuarioSistema   UsuarioSistema @relation(fields: [usuarioSistemaId], references: [id])
  usuarioSistemaId String         @unique
}
